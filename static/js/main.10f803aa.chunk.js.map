{"version":3,"sources":["components/FirstTask/FirstTask.module.css","assets/images/jpg/valakas.jpg","components/SecondTask/SecondTask.module.css","components/FirstTask/FirstTask.tsx","redux/secondTaskReducer.ts","components/SecondTask/SecondTask.tsx","App.tsx","serviceWorker.ts","redux/firstTaskReducer.ts","redux/store.ts","index.tsx"],"names":["module","exports","FirstTask","props","useState","state","users","user","className","styles","wrap","box","colPic","src","avatar","alt","colMsg","mountMsg","userName","name","msg","boxDate","date","DELETE_TASK","initialState","tasks","id","task","priority","priorityFilters","isActive","secondTaskReducer","action","type","filter","t","taskId","map","SecondTask","filterValue","setFilterValue","dispatch","useDispatch","useSelector","myTasks","el","myTask","key","value","onClick","onFilterBtnClick","filterButtonIsActiveAC","MyFilterButtons","b","active","col","myTasksList","filterTasksColumn","App","firstTaskReducer","store","Boolean","window","location","hostname","match","rootReducer","combineReducers","createStore","ReactDOM","render","StrictMode","getState","bind","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2GACAA,EAAOC,QAAU,CAAC,KAAO,wBAAwB,IAAM,uBAAuB,OAAS,0BAA0B,OAAS,0BAA0B,SAAW,4BAA4B,SAAW,4BAA4B,IAAM,uBAAuB,QAAU,6B,mBCDzQD,EAAOC,QAAU,IAA0B,qC,kBCC3CD,EAAOC,QAAU,CAAC,KAAO,yBAAyB,IAAM,wBAAwB,YAAc,gCAAgC,OAAS,2BAA2B,kBAAoB,sCAAsC,OAAS,6B,gNC+BtNC,EA3BU,SAACC,GAAgB,IAAD,EAEbC,mBAAoBD,EAAME,MAAMC,OAFnB,mBAEhCA,EAFgC,KAI/BC,GAJ+B,KAIxBD,EAAM,IACnB,OACI,yBAAKE,UAAWC,IAAOC,MACnB,yBAAKF,UAAWC,IAAOE,KACnB,yBAAKH,UAAWC,IAAOG,QACnB,yBAAKC,IAAKC,IAAQC,IAAI,YAE1B,yBAAKP,UAAWC,IAAOO,QACnB,yBAAKR,UAAWC,IAAOQ,UACnB,wBAAIT,UAAWC,IAAOS,UAAWX,EAAKY,MACtC,0BAAMX,UAAWC,IAAOW,KACnBb,EAAKa,KAEV,yBAAKZ,UAAWC,IAAOY,SACnB,8BAAOd,EAAKe,Y,sCCrBlCC,EAAc,gCAKPC,EAAiC,CAC1CC,MAAO,CACH,CAACC,GAAI,EAAGC,KAAM,OAAQC,SAAU,QAChC,CAACF,GAAI,EAAGC,KAAM,OAAQC,SAAU,OAChC,CAACF,GAAI,EAAGC,KAAM,QAASC,SAAU,UACjC,CAACF,GAAI,EAAGC,KAAM,QAASC,SAAU,QACjC,CAACF,GAAI,EAAGC,KAAM,aAAcC,SAAU,SAE1CC,gBAAiB,CACb,CAACD,SAAU,MAAOE,UAAU,GAC5B,CAACF,SAAU,QACX,CAACA,SAAU,UACX,CAACA,SAAU,SAuBJG,EAnBW,WAA0D,IAAzD1B,EAAwD,uDAA9BmB,EAAcQ,EAAgB,uCAC/E,OAAQA,EAAOC,MACX,KAAKV,EACD,OAAO,eACJlB,EADH,CAEIoB,MAAOpB,EAAMoB,MAAMS,QAAO,SAACC,GAAD,OAAOA,EAAET,KAAOM,EAAOI,YAEzD,IA3BuB,2CA4BnB,OAAO,eACJ/B,EADH,CAEIwB,gBAAiBxB,EAAMwB,gBAAgBQ,KAAI,SAAAF,GAAC,OAAIA,EAAEP,WAAaI,EAAOJ,SAAtB,eAAqCO,EAArC,CAAwCL,UAAU,IAAlD,eAA8DK,EAA9D,CAAiEL,UAAU,SAEnI,QAAS,OAAOzB,ICyBTiC,EArDI,SAACnC,GAAgB,IAAD,EACKC,mBAAS,OADd,mBAC1BmC,EAD0B,KACbC,EADa,KAGzBC,EAAWC,cAEXjB,EAAQkB,aAAY,SAACtC,GAAD,OAAyBA,EAAM0B,kBAAkBN,SACrEI,EAAkBc,aAAY,SAACtC,GAAD,OAAyBA,EAAM0B,kBAAkBF,mBASjFe,EAPgBnB,EAAMS,QAAO,SAACW,GAC9B,MAAuB,QAAhBN,EACDM,EACAA,EAAGjB,WAAaW,KAIEF,KAAI,SAACF,GACzB,OACI,wBAAI3B,UAAWC,IAAOqC,OAAQC,IAAKZ,EAAET,IACjC,mDAAqBS,EAAEP,SAAvB,OACA,+CAAiBO,EAAER,KAAnB,OACA,2BAAOM,KAAK,SAASe,MAAM,IAAIC,QAAS,kBAAOR,GDYtCL,ECZ4DD,EAAET,GDYxC,CAACO,KAAMV,EAAaa,YAA3C,IAACA,SCNnBc,EAAmB,SAACtB,GACtBY,EAAeZ,GACfa,EDK8B,SAACb,GAAD,MAAgC,CAACK,KArCxC,2CAqCsEL,YCLpFuB,CAAuBvB,KAGhCwB,EAAkBvB,EAAgBQ,KAAI,SAACgB,GACvC,OAAOA,EAAEvB,SACH,4BAAQmB,QAAS,kBAAMC,EAAiBG,EAAEzB,WAAWpB,UAAWC,IAAO6C,QAASD,EAAEzB,UAClF,4BAAQqB,QAAS,kBAAMC,EAAiBG,EAAEzB,YAAYyB,EAAEzB,aAIlE,OACI,yBAAKpB,UAAWC,IAAOC,MACnB,yBAAKF,UAAWC,IAAO8C,KACnB,wBAAI/C,UAAWC,IAAO+C,aACjBZ,GAEL,yBAAKpC,UAAWC,IAAOgD,mBACnB,uDACCL,MCpCNM,MAXf,SAAavD,GACT,OACI,yBAAKK,UAAU,OACX,kBAAC,IAAD,KACI,kBAAC,EAAD,CAAWH,MAAOF,EAAME,MAAMsD,mBAC9B,kBAAC,EAAD,CAAYtD,MAAOF,EAAME,MAAM0B,kBAAmBU,SAAUtC,EAAMyD,MAAMnB,cCCpEoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WCZAzC,EAAiC,CACnClB,MAAO,CACH,CAACoB,GAAI,EAAGP,KAAM,iCAASC,IAAK,wDAAsBE,KAAM,WAYjDqC,EARiB,WAA0D,IAAzDtD,EAAwD,uDAA9BmB,EAAcQ,EAAgB,uCAExE,OADLA,EAAOC,KACK5B,GCVX6D,EAAcC,YAAgB,CACvCR,iBAAkBA,EAClB5B,kBAAkBA,IAOP6B,EAFMQ,YAAYF,GCHjCG,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,IAAD,CAAUX,MAAOA,GACb,kBAAC,EAAD,CAAKvD,MAAOuD,EAAMY,WAAYZ,MAAOA,EAAOnB,SAAUmB,EAAMnB,SAASgC,KAAKb,OAGlFc,SAASC,eAAe,SH6HtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.10f803aa.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrap\":\"FirstTask_wrap__1_ykZ\",\"box\":\"FirstTask_box__3CHLD\",\"colPic\":\"FirstTask_colPic__4OwPK\",\"colMsg\":\"FirstTask_colMsg__3hiW_\",\"mountMsg\":\"FirstTask_mountMsg__eBmXx\",\"userName\":\"FirstTask_userName__1MqiW\",\"msg\":\"FirstTask_msg__19tMv\",\"boxDate\":\"FirstTask_boxDate__2e196\"};","module.exports = __webpack_public_path__ + \"static/media/valakas.a8967f9d.jpg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrap\":\"SecondTask_wrap__1yRHd\",\"col\":\"SecondTask_col__18dSG\",\"myTasksList\":\"SecondTask_myTasksList__lQDlC\",\"myTask\":\"SecondTask_myTask__1_0WI\",\"filterTasksColumn\":\"SecondTask_filterTasksColumn__1XSq7\",\"active\":\"SecondTask_active__xgr5M\"};","import React, {useState} from 'react';\r\nimport styles from './FirstTask.module.css';\r\nimport avatar from './../../assets/images/jpg/valakas.jpg';\r\nimport {UsersType, UserType} from '../../types/entities';\r\n\r\nexport const FirstTask = (props: any) => {\r\n\r\n    let [users, setUsers] = useState<UsersType>(props.state.users)\r\n\r\n    const user = users[0];\r\n    return (\r\n        <div className={styles.wrap}>\r\n            <div className={styles.box}>\r\n                <div className={styles.colPic}>\r\n                    <img src={avatar} alt=\"avatar\"/>\r\n                </div>\r\n                <div className={styles.colMsg}>\r\n                    <div className={styles.mountMsg}>\r\n                        <h3 className={styles.userName}>{user.name}</h3>\r\n                        <span className={styles.msg}>\r\n                            {user.msg}\r\n                        </span>\r\n                        <div className={styles.boxDate}>\r\n                            <span>{user.date}</span>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FirstTask;","import {priorityFiltersType, PriorityType, TasksPriorityType} from '../types/entities';\r\n\r\nconst DELETE_TASK = 'secondTaskReducer/DELETE-TASK';\r\nconst CHANGE_ACTIVE_PRIORITY = 'secondTaskReducer/CHANGE-ACTIVE-PRIORITY';\r\n\r\nexport type InitialStateType = {tasks:TasksPriorityType, priorityFilters: priorityFiltersType}\r\n\r\nexport const initialState: InitialStateType = {\r\n    tasks: [\r\n        {id: 1, task: 'Work', priority: 'High'},\r\n        {id: 2, task: 'News', priority: 'Low'},\r\n        {id: 3, task: 'Games', priority: 'Middle'},\r\n        {id: 4, task: 'React', priority: 'High'},\r\n        {id: 5, task: 'JavaScript', priority: 'High'}\r\n    ],\r\n    priorityFilters: [\r\n        {priority: 'All', isActive: true},\r\n        {priority: 'High'},\r\n        {priority: 'Middle'},\r\n        {priority: 'Low'}\r\n    ],\r\n}\r\n\r\nconst secondTaskReducer = (state: InitialStateType = initialState, action: any) => {\r\n    switch (action.type) {\r\n        case DELETE_TASK:\r\n            return {\r\n            ...state,\r\n                tasks: state.tasks.filter((t) => t.id !== action.taskId)\r\n            };\r\n        case CHANGE_ACTIVE_PRIORITY:\r\n            return {\r\n            ...state,\r\n                priorityFilters: state.priorityFilters.map(t => t.priority === action.priority ? {...t, isActive: true} : {...t, isActive: false})\r\n            };\r\n        default: return state;\r\n    }\r\n}\r\n\r\nexport const deleteTaskAC = (taskId:number):{} => ({type: DELETE_TASK, taskId});\r\nexport const filterButtonIsActiveAC = (priority: PriorityType):{} => ({type: CHANGE_ACTIVE_PRIORITY, priority})\r\n\r\nexport default secondTaskReducer;\r\n\r\n","import React, {useEffect, useState} from 'react';\r\nimport styles from './SecondTask.module.css';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {deleteTaskAC, filterButtonIsActiveAC} from '../../redux/secondTaskReducer';\r\nimport {AppStateType} from '../../redux/store';\r\nimport {PriorityType, TaskPriorityType} from '../../types/entities';\r\n\r\nconst SecondTask = (props: any) => {\r\n    let [filterValue, setFilterValue] = useState('All');\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const tasks = useSelector((state: AppStateType) => state.secondTaskReducer.tasks)\r\n    const priorityFilters = useSelector((state: AppStateType) => state.secondTaskReducer.priorityFilters)\r\n\r\n    let filteredTasks = tasks.filter((el) => {\r\n        return filterValue === 'All'\r\n            ? el\r\n            : el.priority === filterValue\r\n    })\r\n\r\n\r\n    let myTasks = filteredTasks.map((t: TaskPriorityType) => {\r\n            return (\r\n                <li className={styles.myTask} key={t.id}>\r\n                    <span>{`Priority: '${t.priority}' `}</span>\r\n                    <span>{`Task: '${t.task}' `}</span>\r\n                    <input type='button' value='x' onClick={() => (dispatch(deleteTaskAC(t.id)))}/>\r\n                </li>\r\n            )\r\n\r\n    });\r\n\r\n    const onFilterBtnClick = (priority: PriorityType) => {\r\n        setFilterValue(priority)\r\n        dispatch(filterButtonIsActiveAC(priority))\r\n    }\r\n\r\n    let MyFilterButtons = priorityFilters.map((b:any) => {\r\n        return b.isActive\r\n            ? <button onClick={() => onFilterBtnClick(b.priority)} className={styles.active}>{b.priority}</button>\r\n            : <button onClick={() => onFilterBtnClick(b.priority)}>{b.priority}</button>\r\n    });\r\n\r\n\r\n    return (\r\n        <div className={styles.wrap}>\r\n            <div className={styles.col}>\r\n                <ol className={styles.myTasksList}>\r\n                    {myTasks}\r\n                </ol>\r\n                <div className={styles.filterTasksColumn}>\r\n                    <h5>Filtering by priority: </h5>\r\n                    {MyFilterButtons}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SecondTask;","import React from 'react';\r\nimport './App.css';\r\nimport FirstTask from './components/FirstTask/FirstTask';\r\nimport {BrowserRouter} from 'react-router-dom';\r\nimport SecondTask from './components/SecondTask/SecondTask';\r\n\r\nfunction App(props: any) {\r\n    return (\r\n        <div className=\"App\">\r\n            <BrowserRouter>\r\n                <FirstTask state={props.state.firstTaskReducer} />\r\n                <SecondTask state={props.state.secondTaskReducer} dispatch={props.store.dispatch}/>\r\n            </BrowserRouter>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import {UsersType} from '../types/entities';\r\n\r\ntype InitialStateType = {\r\n    users: UsersType\r\n}\r\n\r\nconst initialState: InitialStateType = {\r\n    users: [\r\n        {id: 1, name: 'Артем', msg: 'npm start нажимал?', date: '20:00'}\r\n    ]\r\n}\r\n\r\nexport const firstTaskReducer = (state: InitialStateType = initialState, action: any) => {\r\n    switch (action.type) {\r\n        default: return state;\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default firstTaskReducer;","import {combineReducers, createStore} from 'redux';\r\nimport firstTaskReducer from './firstTaskReducer';\r\nimport secondTaskReducer from './secondTaskReducer';\r\n\r\nexport const rootReducer = combineReducers({\r\n    firstTaskReducer: firstTaskReducer,\r\n    secondTaskReducer:secondTaskReducer\r\n});\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n\r\nexport const store = createStore(rootReducer);\r\n\r\nexport default store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport store from './redux/store';\r\nimport {Provider} from 'react-redux';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <App state={store.getState()} store={store} dispatch={store.dispatch.bind(store)}/>\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}